<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Transcri√ß√£o com Toasts (sem API)</title>
  <style>
    :root {
      --bg1:#0f172a; --bg2:#0b1220; --card:#1e293b; --borda:#334155;
      --txt:#e5e7eb; --muted:#94a3b8; --ok:#22c55e; --danger:#ef4444; --toast:#111827;
    }
    *{box-sizing:border-box}
    body{margin:0; background:linear-gradient(180deg,var(--bg1),var(--bg2)); color:var(--txt);
         font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial; padding:20px;
         display:flex; flex-direction:column; align-items:center; gap:16px;}
    h1{margin:0; font-size:20px}
    .panel{width:92%; max-width:640px; background:var(--card); border:1px solid var(--borda);
           border-radius:12px; padding:14px 12px;}
    .buttons{display:flex; gap:10px; flex-wrap:wrap; margin-bottom:10px}
    button{appearance:none; border:0; padding:10px 14px; border-radius:10px; font-weight:700; cursor:pointer}
    .start{background:var(--ok); color:#052e16}
    .stop{background:var(--danger); color:#fff}
    .clear{background:transparent; color:var(--txt); border:1px solid var(--borda)}
    label{display:block; font-size:12px; color:var(--muted); margin:6px 0}
    #box{height:260px; background:#0b1020; border:1px dashed var(--borda); border-radius:10px;
         padding:10px; overflow-y:auto; white-space:pre-wrap; line-height:1.45}
    .row{display:flex; align-items:center; gap:8px; font-size:12px; color:var(--muted); margin-top:6px}
    .dot{width:8px; height:8px; border-radius:50%; background:#64748b}
    .dot.on{background:#10b981; box-shadow:0 0 0 4px rgba(16,185,129,.18)}
    /* Toasts */
    .toasts{position:fixed; right:16px; bottom:16px; display:flex; flex-direction:column; gap:8px; z-index:9999}
    @media (max-width:540px){ .toasts{right:50%; transform:translateX(50%);} }
    .toast{background:var(--toast); border:1px solid rgba(255,255,255,.12); border-left:5px solid var(--ok);
           color:var(--txt); padding:12px 14px; border-radius:10px; max-width:92vw; width:320px;
           opacity:0; transform:translateY(6px) scale(.98); animation:pop .2s ease-out forwards}
    .toast h4{margin:0 0 4px 0; font-size:14px}
    .toast p{margin:0; font-size:13px; color:#d1d5db}
    @keyframes pop{to{opacity:1; transform:translateY(0) scale(1)}}
    .blink{animation:blink 1s steps(2,start) 2}
    @keyframes blink{to{visibility:hidden}}
  </style>
</head>
<body>
  <h1>üéôÔ∏è Transcri√ß√£o em tempo real</h1>

  <div class="panel">
    <div class="buttons">
      <button class="start" id="btnStart">Iniciar</button>
      <button class="stop" id="btnStop">Parar</button>
      <button class="clear" id="btnClear">Limpar</button>
      <div class="row"><span class="dot" id="dot"></span><span id="status">Parado</span></div>
    </div>

    <label>Transcri√ß√£o</label>
    <div id="box"></div>

    <label style="margin-top:10px">Palavras-chave que disparam toasts (exemplos):</label>
    <div style="font-size:12px; color:var(--muted)">
      <code>cliente</code>, <code>investimento</code>, <code>cart√£o</code>, <code>cr√©dito</code>, <code>seguro</code>
    </div>
  </div>

  <div class="toasts" id="toasts"></div>

  <script>
    const box = document.getElementById("box");
    const dot = document.getElementById("dot");
    const statusTxt = document.getElementById("status");
    const toasts = document.getElementById("toasts");
    let recognition = null, listening = false;

    // --- utilidades UI ---
    function setStatus(on){ if(on){dot.classList.add("on"); statusTxt.textContent="Gravando";} else {dot.classList.remove("on"); statusTxt.textContent="Parado";} }
    function toast(title, body){
      const el=document.createElement("div");
      el.className="toast blink";
      el.innerHTML = `<h4>${title}</h4><p>${body}</p>`;
      toasts.appendChild(el);
      setTimeout(()=>{ el.style.opacity=.0; el.style.transform='translateY(6px)';
        setTimeout(()=>el.remove(),300); }, 4500);
    }

    // --- gatilhos locais com cooldown por termo ---
    const triggers = [
      { re:/\b(cart(√£|a)o|cartao|cart√£o|cart√µes)\b/i, tip:"Cheque limites, anuidade e benef√≠cios antes de oferecer upgrade." },
      { re:/\b(invest(imento|ir|e))\b/i,            tip:"Pergunte prazo, liquidez e objetivo para encaixar o produto certo." },
      { re:/\b(cr[e√©]dito|empr[e√©]stimo)\b/i,       tip:"Valide renda, parcelas e seguros; fa√ßa simula√ß√£o consultiva." },
      { re:/\b(seguro(s)?)\b/i,                     tip:"Gancho de prote√ß√£o familiar e eventos imprevistos." },
      { re:/\b(cliente|senhor|senhora|voc[√™e])\b/i, tip:"Use pergunta aberta para confirmar necessidade antes da oferta." }
    ];
    const lastToastByIdx = new Map();
    const TOAST_COOLDOWN_MS = 5000;

    function runTriggersOn(finalPhrase){
      const now = Date.now();
      for(let i=0;i<triggers.length;i++){
        const t = triggers[i];
        if(t.re.test(finalPhrase)){
          const last = lastToastByIdx.get(i) || 0;
          if(now - last > TOAST_COOLDOWN_MS){
            toast("üí° Insight r√°pido", t.tip);
            lastToastByIdx.set(i, now);
          }
          break; // dispara s√≥ um por frase
        }
      }
    }

    // --- transcri√ß√£o ---
    function setupRecognition(){
      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      if(!SR){
        box.textContent = "Seu navegador n√£o suporta reconhecimento de voz (use Chrome no desktop/Android).";
        return null;
      }
      const rec = new SR();
      rec.lang = "pt-BR";
      rec.continuous = true;
      rec.interimResults = true;

      rec.onstart = ()=>{ listening=true; setStatus(true); };
      rec.onend   = ()=>{ listening=false; setStatus(false); };

      // atualiza texto e roda gatilhos somente em resultados finais
      rec.onresult = (ev)=>{
        let parcial = "";
        for(let i=ev.resultIndex; i<ev.results.length; i++){
          const r = ev.results[i];
          const t = (r[0] && r[0].transcript) ? r[0].transcript : "";
          if(r.isFinal){
            appendLine(t.trim());
            runTriggersOn(t);
          } else {
            parcial = t;
          }
        }
        // mostra parcial na √∫ltima linha sem empurrar a p√°gina
        if(parcial){
          showPartial(parcial);
        }
      };

      rec.onerror = (e)=>{
        appendLine(`[Erro]: ${e.error || "desconhecido"}`);
      };

      return rec;
    }

    // mant√©m o box fixo com rolagem interna
    function appendLine(text){
      if(!text) return;
      const current = box.textContent;
      const sep = current && !current.endsWith("\n") ? "\n" : "";
      box.textContent = (current || "") + sep + text + "\n";
      box.scrollTop = box.scrollHeight; // rola s√≥ dentro do box
    }
    // renderiza parcial substituindo a √∫ltima linha
    function showPartial(parcial){
      const lines = box.textContent.split("\n");
      if(lines[lines.length-1].trim() === "") lines.pop();
      const base = lines.slice(0, -1).join("\n");
      const lastFull = lines.length ? lines[lines.length-1] : "";
      const merged = (base ? base + "\n" : "") + (lastFull ? lastFull + "\n" : "") + parcial;
      box.textContent = merged;
      box.scrollTop = box.scrollHeight;
    }

    // bot√µes
    document.getElementById("btnStart").onclick = ()=>{
      if(listening) return;
      if(!recognition) recognition = setupRecognition();
      if(recognition){
        try{ recognition.start(); }catch(_){}
      }
    };
    document.getElementById("btnStop").onclick = ()=>{
      if(!listening || !recognition) return;
      try{ recognition.stop(); }catch(_){}
    };
    document.getElementById("btnClear").onclick = ()=>{ box.textContent = ""; };
  </script>
</body>
</html>